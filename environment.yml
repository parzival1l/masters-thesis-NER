# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries

name: charEncoder

channels:
  - conda-forge
  - defaults

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - python=3.10
  - hydra-core=1.*
  - rich=13.*
  - pre-commit=3.*
  - pytest=7.*
  - pandas=2.*
  - pip>=23
  - pip:
      - hydra-core==1.3.2
      - hydra-colorlog
      - hydra-joblib-launcher==1.2.0
      - hydra-optuna-sweeper
      - scikit-learn==1.1.1
      - scipy==1.10.0
      - lightning==2.1.2
      - pytorch-crf==0.7.2
      - numpy==1.23.5
      - torch=2.0.1
      - torchmetrics==1.2.0
      - transformers==4.31.0
      - seqeval==1.2.2
      - datasets==2.14.1
      - huggingface
      - databricks-sql-connector
      - mlflow==2.5.0 # logging
      - pyrootutils # standardizing the project root setup
      - pre-commit # hooks for applying linters on commit
      - rich # beautiful text formatting in terminal
      - pytest # tests
